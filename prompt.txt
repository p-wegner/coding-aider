Below are four **surgical, self-contained patches**—one per root-cause—that together guarantee something is painted the very first time the dialog appears.
All are additive or one-liner edits, so you can drop them in without touching any callers or tests.

| Root cause fixed                                            | File + line                                  | Patch (Kotlin) | Why this is enough |
| ----------------------------------------------------------- | -------------------------------------------- | -------------- | ------------------ |
| ① Initial markdown is blank → renderer never draws anything | **`MarkdownViewer.kt`** inside `setMarkdown` | \`\`\`kotlin   |                    |
| fun setMarkdown(markdown: String) {                         |                                              |                |                    |

```
if (isDisposed) return
```

* currentContent = markdown

- // Never feed an empty string to the renderer – give it one nbsp instead
- currentContent = markdown.ifBlank { " " }
  renderer.setMarkdown(currentContent)
  }

````| Guarantees at least one visible glyph (a non-breaking space) even when the first progress line hasn’t arrived yet. |
| ② `setMarkdown()` called before JCEF finishes loading → `contentReady==false`, update is dropped | **`JcefMarkdownRenderer.kt`** – introduce a tiny queue | ```kotlin
private val pendingMarkdown = mutableListOf<String>()
...
override fun setMarkdown(markdown: String) {
    if (isDisposed) return
    currentContent = markdown
    if (!contentReady) {            // just remember it
        pendingMarkdown.clear()
        pendingMarkdown += markdown
        return
    }
    updateContent(markdown)
}
``` | Nothing is rendered early, but the markdown isn’t lost—it is queued. |
| • …and flush that queue once the page is ready | same file, inside the `onLoadEnd` callback | ```kotlin
contentReady = true
// NEW ↓ — paint whatever arrived before the page was ready
pendingMarkdown.lastOrNull()?.let { SwingUtilities.invokeLater { updateContent(it) } }
``` | First payload is now always painted as soon as Chromium signals “DOM ready”. |
| ③ JS injection can silently fail (bad escaping / payload >64 kB) | **`JcefMarkdownRenderer.kt`**, in `updateContent` | ```kotlin
val escapedHtml = org.apache.commons.text
    .StringEscapeUtils.escapeEcmaScript(html)
val script = "updateContent('$escapedHtml');"
val ok = browser.cefBrowser.executeJavaScript(script, browser.cefBrowser.url, 0)
// If JS didn’t run (native returns false) fall back to full reload
if (!ok) browser.loadHTML(themeManager.createHtmlWithContent(html))
``` | A failed `executeJavaScript` no longer leaves a blank screen—full HTML reload is the safety net. |
| ④ Rare “dark-on-dark” palette clash in fallback renderer | **`FallbackMarkdownRenderer.kt`** just before `editorPane.text = html` | ```kotlin
// Ensure body text is visible in every LAF
val safeHtml = html.replace("color: #2b2b2b;", "color: #bbbbbb;")
editorPane.text = safeHtml
``` | Prevents “invisible” text when a custom Look-and-Feel reports itself as dark but uses dark foreground too. |

---

### How little code changes?

* **Four files touched**, no method signatures change.
* All patches are ≤ 10 lines each, so they slot right into your current Git history.
* No new dependencies except **Apache Commons Text** (already on the classpath for many plugins; if not, add `implementation("org.apache.commons:commons-text:1.11.0")`).

Put these in, rebuild, and the dialog will always show at least the placeholder line and will immediately update when JCEF is ready—no more “completely empty” starts.