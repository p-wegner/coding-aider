@startuml

package "de.andrena.codingaider.executors" {
    class CommandExecutor {
        - CommandData commandData
        - Project project
        - ApiKeyChecker apiKeyChecker
        + executeCommand(): String
        + abortCommand(): void
    }

    class ShellExecutor {
        - Project project
        - CommandData commandData
        + execute(): void
    }

    class IDEBasedExecutor {
        - Project project
        - CommandData commandData
        + execute(): MarkdownDialog
        + abortCommand(): void
    }

    class LiveUpdateExecutor {
        - CommandData commandData
        - Project project
        + execute(): String
    }

    class SimpleExecutor {
        - Project project
        - CommandData commandData
        + execute(): String
    }

    class CommandLogger {
        - Project project
        - AiderSettings settings
        - CommandData commandData
        + getCommandString(includeNewlines: Boolean, dockerManager: DockerContainerManager?): String
        + prependCommandToOutput(output: String): String
    }

    class GenericCommandSubject {
        + addObserver(observer: CommandObserver): Boolean
        + notifyObservers(event: (CommandObserver) -> Unit): void
    }

    abstract class AiderExecutionStrategy {
        + buildCommand(commandData: CommandData): List<String>
        + prepareEnvironment(processBuilder: ProcessBuilder, commandData: CommandData): void
        + cleanupAfterExecution(): void
    }

    interface CommandObserver {
        + onCommandStart(message: String): void
        + onCommandProgress(message: String, runningTime: Long): void
        + onCommandComplete(message: String, exitCode: Int): void
        + onCommandError(message: String): void
    }

    CommandExecutor --> AiderExecutionStrategy
    CommandExecutor --> CommandLogger
    IDEBasedExecutor --> CommandExecutor
    LiveUpdateExecutor --> CommandExecutor
    SimpleExecutor --> CommandExecutor
    GenericCommandSubject <|.. CommandObserver
}

@enduml
