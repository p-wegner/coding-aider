# CSS Styles for Markdown Viewer
markdown.viewer.css.styles=\
        /* Base styles */\
        body { \
            font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\
            line-height: 1.6;\
            background: {0};\
            color: {1};\
            margin: 20px;\
            padding: 0;\
        }\
        \
        /* Code blocks */\
        pre {\
            background: {2};\
            border: 1px solid {3};\
            padding: 15px;\
            margin: 15px 0;\
            border-radius: 6px;\
            overflow-x: auto;\
            white-space: pre-wrap;\
        }\
        \
        pre code {\
            font-family: ''JetBrains Mono'', Consolas, Monaco, ''Courier New'', monospace;\
            font-size: 14px;\
            tab-size: 4;\
        }\
        \
        /* Search/Replace blocks */\
        .search-block {\
            background: {4};\
            color: {5};\
            padding: 8px 12px;\
            border-radius: 4px 4px 0 0;\
            margin: 0;\
            border-bottom: 1px solid {3};\
            display: block;\
        }\
        \
        .replace-block {\
            background: {6};\
            color: {7};\
            padding: 8px 12px;\
            border-radius: 0 0 4px 4px;\
            margin: 0;\
            display: block;\
        }\
        \
        /* Edit format panels */\
        .edit-format-panel {\
            border: 1px solid {8};\
            border-radius: 6px;\
            margin: 15px 0;\
            overflow: hidden;\
        }\
        \
        .edit-format {\
            background: {9};\
            font-weight: bold;\
            border-bottom: 1px solid {8};\
        }\
        \
        .edit-format-content {\
            margin: 0;\
            padding: 0;\
        }\
        \
        /* Aider blocks */\
        .aider-intention, .aider-summary {\
            border-radius: 6px;\
            padding: 12px;\
            margin: 15px 0;\
            font-size: 14px;\
            line-height: 1.5;\
        }\
        \
        .aider-intention {\
            background: {10};\
            border: 1px solid {11};\
            color: {12};\
        }\
        \
        .aider-summary {\
            background: {13};\
            border: 1px solid {14};\
            color: {15};\
        }\
        \
        /* Collapsible panels */\
        .collapsible-panel {\
            border: 1px solid {3};\
            border-radius: 6px;\
            margin: 15px 0;\
            overflow: hidden;\
        }\
        \
        .collapsible-header {\
            background: {2};\
            padding: 10px 15px;\
            cursor: pointer;\
            display: flex;\
            justify-content: space-between;\
            align-items: center;\
        }\
        \
        .collapsible-title {\
            font-weight: bold;\
        }\
        \
        .collapsible-content {\
            padding: 0;\
            max-height: 0;\
            overflow: hidden;\
            transition: max-height 0.3s ease-out, padding 0.3s ease-out;\
        }\
        \
        .collapsible-panel.expanded .collapsible-content {\
            max-height: 2000px;\
            padding: 10px 15px;\
        }\
        \
        /* File path styling */\
        .file-path {\
            font-family: monospace;\
            padding: 5px 10px;\
            background: {2};\
            border-bottom: 1px solid {3};\
        }\
        \
        /* Lists in aider blocks */\
        .aider-intention ul, .aider-summary ul {\
            padding-left: 20px;\
        }\
        \
        .aider-intention li, .aider-summary li {\
            margin: 5px 0;\
        }

markdown.viewer.collapsible.panel=<div class="collapsible-panel expanded">\
    <div class="collapsible-header {0}">\
        <span class="collapsible-title">{1}</span>\
        <span class="collapsible-arrow">â–¼</span>\
    </div>\
    <div class="collapsible-content">\
        {2}\
    </div>\
</div>

markdown.viewer.error.html=<!DOCTYPE html>\
<html>\
<head>\
    <style>\
        body {\
            font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\
            background: {0};\
            color: {1};\
            display: flex;\
            justify-content: center;\
            align-items: center;\
            height: 100vh;\
            margin: 0;\
            text-align: center;\
        }\
        .error-container {\
            padding: 20px;\
            border-radius: 8px;\
            background: {2};\
            border: 1px solid {3};\
            max-width: 80%;\
        }\
        h3 {\
            margin-top: 0;\
            color: {4};\
        }\
    </style>\
</head>\
<body>\
    <div class="error-container">\
        <h3>Markdown Viewer Error</h3>\
        <p>{5}</p>\
    </div>\
</body>\
</html>

markdown.viewer.html.template=<!DOCTYPE html>\
<html>\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <style>\
        html, body {\
            font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Roboto, Oxygen, Ubuntu, Cantarell, ''Open Sans'', ''Helvetica Neue'', sans-serif;\
            line-height: 1.6;\
            margin: 0;\
            padding: 0;\
            background: {0};\
            color: {1};\
            height: 100%;\
            overflow: auto;\
        }\
        /* Custom scrollbar styling */\
        ::-webkit-scrollbar {\
            width: 10px;\
            height: 10px;\
        }\
        ::-webkit-scrollbar-track {\
            background: {0};\
        }\
        ::-webkit-scrollbar-thumb {\
            background: {2};\
            border-radius: 4px;\
        }\
        ::-webkit-scrollbar-thumb:hover {\
            background: {3};\
        }\
        body {\
            padding: 20px;\
        }\
        #content {\
            max-width: 100%;\
            overflow-wrap: break-word;\
            overflow-y: auto;\
            height: auto;\
        }\
        /* Smooth scrolling for better UX */\
        html {\
            scroll-behavior: smooth;\
        }\
        pre {\
            white-space: pre-wrap;\
            overflow-x: auto;\
            background: {4};\
            padding: 10px;\
            border-radius: 4px;\
            font-family: ''JetBrains Mono'', Consolas, Monaco, ''Courier New'', monospace;\
        }\
        code {\
            font-family: ''JetBrains Mono'', Consolas, Monaco, ''Courier New'', monospace;\
        }\
        /* Table styling */\
        table {\
            border-collapse: collapse;\
            width: 100%;\
            margin: 15px 0;\
        }\
        th, td {\
            border: 1px solid {5};\
            padding: 8px 12px;\
            text-align: left;\
        }\
        th {\
            background-color: {4};\
            font-weight: bold;\
        }\
        /* Link styling */\
        a {\
            color: {6};\
            text-decoration: none;\
        }\
        a:hover {\
            text-decoration: underline;\
        }\
        /* Blockquote styling */\
        blockquote {\
            border-left: 4px solid {5};\
            margin: 15px 0;\
            padding: 0 15px;\
            color: {7};\
        }\
        /* Heading styling */\
        h1, h2, h3, h4, h5, h6 {\
            margin-top: 24px;\
            margin-bottom: 16px;\
            font-weight: 600;\
            line-height: 1.25;\
        }\
        h1 {\
            font-size: 2em;\
            border-bottom: 1px solid {5};\
            padding-bottom: 0.3em;\
        }\
        h2 {\
            font-size: 1.5em;\
            border-bottom: 1px solid {5};\
            padding-bottom: 0.3em;\
        }\
        h3 {\
            font-size: 1.25em;\
        }\
        /* List styling */\
        ul, ol {\
            padding-left: 2em;\
            margin: 15px 0;\
        }\
        li {\
            margin: 5px 0;\
        }\
        /* Checkbox styling */\
        input[type="checkbox"] {\
            margin-right: 0.5em;\
        }\
        /* Search/Replace blocks */\
        .search-block {\
            background: #362a1e;\
            color: #ff8c7c;\
            padding: 8px 12px;\
            border-radius: 4px 4px 0 0;\
            margin: 0;\
            border-bottom: 1px solid #666;\
            display: block;\
        }\
        \
        .replace-block {\
            background: #1e3626;\
            color: #7cff8c;\
            padding: 8px 12px;\
            border-radius: 0 0 4px 4px;\
            margin: 0;\
            display: block;\
        }\
        \
        /* Edit format panels */\
        .edit-format-panel {\
            border: 1px solid #555;\
            border-radius: 6px;\
            margin: 15px 0;\
            overflow: hidden;\
        }\
        \
        .edit-format {\
            background: #3c3f41;\
            font-weight: bold;\
            border-bottom: 1px solid #555;\
            padding: 5px 10px;\
        }\
        \
        .edit-format-content {\
            margin: 0;\
            padding: 0;\
        }\
        \
        /* File path styling */\
        .file-path {\
            font-family: monospace;\
            padding: 5px 10px;\
            background: {4};\
            border-bottom: 1px solid #555;\
            color: {6};\
            cursor: pointer;\
        }\
        \
        /* Collapsible panels */\
        .collapsible-panel {\
            border: 1px solid #555;\
            border-radius: 6px;\
            margin: 15px 0;\
            overflow: hidden;\
        }\
        \
        .collapsible-header {\
            background: {4};\
            padding: 10px 15px;\
            cursor: pointer;\
            display: flex;\
            justify-content: space-between;\
            align-items: center;\
        }\
        \
        .collapsible-title {\
            font-weight: bold;\
        }\
        \
        .collapsible-content {\
            padding: 0;\
            max-height: 0;\
            overflow: hidden;\
            transition: max-height 0.3s ease-out, padding 0.3s ease-out;\
        }\
        \
        .collapsible-panel.expanded .collapsible-content {\
            max-height: 2000px;\
            padding: 10px 15px;\
        }\
        \
        /* Aider blocks */\
        .aider-intention, .aider-summary {\
            border-radius: 6px;\
            padding: 12px;\
            margin: 15px 0;\
            font-size: 14px;\
            line-height: 1.5;\
        }\
        \
        .aider-intention {\
            background: #1a2733;\
            border: 1px solid #2c4356;\
            color: #a8c7f0;\
        }\
        \
        .aider-summary {\
            background: #2d2d2d;\
            border: 1px solid #454545;\
            color: #e8e8e8;\
        }\
    </style>\
    <script>\
        // Highlight.js for syntax highlighting (minimal inline version)\
        const hljs = (function() {\
            const keywords = 'abstract arguments await boolean break byte case catch char class const continue debugger default delete do double else enum eval export extends false final finally float for function goto if implements import in instanceof int interface let long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with yield';\
            const literals = 'true false null undefined NaN Infinity';\
            \
            function highlight(code, language) {\
                if (!language) return code;\
                \
                // Simple syntax highlighting for common languages\
                let highlighted = code\
                    .replace(/\b(class|function|if|else|for|while|return|var|let|const|import|export|from|new|this)\b/g, '<span class="hljs-keyword">$1</span>')\
                    .replace(/(".*?"|\'.*?\'|`.*?`)/g, '<span class="hljs-string">$1</span>')\
                    .replace(/(\/\/.*|\/\\*[\\s\\S]*?\\*\/)/g, '<span class="hljs-comment">$1</span>')\
                    .replace(/\b([0-9]+)\b/g, '<span class="hljs-number">$1</span>')\
                    .replace(/\b(true|false|null|undefined)\b/g, '<span class="hljs-literal">$1</span>');\
                \
                return highlighted;\
            }\
            \
            return { highlight };\
        })();\
    </script>\
</head>\
<body>\
    <div id="content"></div>\
    <script>\
        // Store panel expansion states\
        let panelStates = JSON.parse(localStorage.getItem('markdownViewerPanelStates') || '{}');\
        \
        // Initialize scroll position tracking\
        let isUserScrolled = false;\
        let isAtBottom = false;\
        window.scrollPositionY = 0;\
        \
        window.addEventListener('scroll', function() {\
            // Check if user is at the bottom of the page\
            isAtBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight - 50;\
            \
            // Store current scroll position\
            window.scrollPositionY = window.scrollY;\
            \
            // Mark as user-scrolled only if not at bottom\
            if (!isAtBottom) {\
                window.isUserScrolled = true;\
            }\
        }, { passive: true });\
        \
        // Function to initialize collapsible panels\
        function initCollapsiblePanels() {\
            document.querySelectorAll('.collapsible-header').forEach(header => {\
                // Remove existing event listeners to prevent duplicates\
                header.removeEventListener('click', togglePanel);\
                // Add click event listener\
                header.addEventListener('click', togglePanel);\
                \
                // Restore panel state if available\
                const panel = header.parentElement;\
                const panelId = getPanelId(panel);\
                if (panelStates[panelId] !== undefined) {\
                    if (panelStates[panelId]) {\
                        panel.classList.add('expanded');\
                        const arrow = header.querySelector('.collapsible-arrow');\
                        if (arrow) arrow.textContent = '\u25BC';\
                    } else {\
                        panel.classList.remove('expanded');\
                        const arrow = header.querySelector('.collapsible-arrow');\
                        if (arrow) arrow.textContent = '\u25B6';\
                    }\
                }\
            });\
            \
            // Apply syntax highlighting to code blocks\
            document.querySelectorAll('pre code').forEach(block => {\
                const language = block.className.replace('language-', '');\
                if (typeof hljs !== 'undefined') {\
                    block.innerHTML = hljs.highlight(block.textContent, language);\
                }\
            });\
            \
            // Make file paths clickable\
            document.querySelectorAll('.file-path').forEach(path => {\
                path.style.cursor = 'pointer';\
                path.title = 'Click to open file';\
                path.addEventListener('click', function() {\
                    window.filePathClicked(path.textContent);\
                });\
            });\
        }\
        \
        // Generate a unique ID for a panel based on its content\
        function getPanelId(panel) {\
            const header = panel.querySelector('.collapsible-header');\
            const title = header ? header.querySelector('.collapsible-title')?.textContent || '' : '';\
            const contentElement = panel.querySelector('.collapsible-content');\
            const contentText = contentElement ? contentElement.textContent || '' : '';\
            const content = contentText.substring(0, Math.min(50, contentText.length));\
            // Create a safe ID by removing problematic characters\
            const safeTitle = title.replace(/[^\w-]/g, '');\
            const safeContent = content.replace(/\s+/g, '').replace(/[^\w-]/g, '');\
            return `panel-${safeTitle}-${safeContent}`;\
        }\
        \
        // Toggle panel function\
        function togglePanel(event) {\
            const panel = this.parentElement;\
            panel.classList.toggle('expanded');\
            \
            // Update arrow indicator\
            const arrow = this.querySelector('.collapsible-arrow');\
            if (arrow) {\
                arrow.textContent = panel.classList.contains('expanded') ? '\u25BC' : '\u25B6';\
            }\
            \
            // Save panel state\
            const panelId = getPanelId(panel);\
            panelStates[panelId] = panel.classList.contains('expanded');\
            localStorage.setItem('markdownViewerPanelStates', JSON.stringify(panelStates));\
        }\
        \
        // Initialize panels when page loads\
        document.addEventListener('DOMContentLoaded', () => {\
            initCollapsiblePanels();\
        });\
    </script>\
</body>\
</html>
